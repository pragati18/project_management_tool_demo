{"ast":null,"code":"var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport { Badge, Nav, NavItem, NavLink as RsNavLink } from 'reactstrap';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport 'react-perfect-scrollbar/dist/css/styles.css'; // import '!style-loader!css-loader!../src/scrollbar.css';\n\nimport '../css/scrollbar.css';\nimport LayoutHelper from './Shared/layout/layout';\nvar propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  navConfig: PropTypes.any,\n  navFunc: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  isOpen: PropTypes.bool,\n  staticContext: PropTypes.any,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  router: PropTypes.any,\n  props: PropTypes.any\n};\nvar defaultProps = {\n  tag: 'nav',\n  navConfig: {\n    items: [{\n      name: 'Dashboard',\n      url: '/dashboard',\n      icon: 'icon-speedometer',\n      badge: {\n        variant: 'info',\n        text: 'NEW'\n      }\n    }]\n  },\n  isOpen: false,\n  router: {\n    RsNavLink: RsNavLink\n  }\n};\n\nvar AppSidebarNav2 = function (_Component) {\n  _inherits(AppSidebarNav2, _Component);\n\n  function AppSidebarNav2(props) {\n    _classCallCheck(this, AppSidebarNav2);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this._scrollBarRef = null;\n    _this.handleClick = _this.handleClick.bind(_this);\n    _this.activeRoute = _this.activeRoute.bind(_this);\n    _this.hideMobile = _this.hideMobile.bind(_this);\n    _this.changes = null;\n    _this.state = {\n      sidebarMinimized: false\n    };\n    return _this;\n  }\n\n  AppSidebarNav2.prototype.handleClick = function handleClick(e) {\n    e.preventDefault();\n    e.currentTarget.parentElement.classList.toggle('open');\n  };\n\n  AppSidebarNav2.prototype.isActiveRoute = function isActiveRoute(routeName, props) {\n    return props.location.pathname.indexOf(routeName) > -1;\n  };\n\n  AppSidebarNav2.prototype.activeRoute = function activeRoute(routeName, props) {\n    return this.isActiveRoute(routeName, props) ? 'nav-item nav-dropdown open' : 'nav-item nav-dropdown';\n  };\n\n  AppSidebarNav2.prototype.hideMobile = function hideMobile() {\n    if (document.body.classList.contains('sidebar-show')) {\n      document.body.classList.toggle('sidebar-show');\n    }\n  };\n\n  AppSidebarNav2.prototype.getAttribs = function getAttribs(attributes) {\n    return JSON.parse(JSON.stringify(attributes || {}));\n  }; // nav list\n\n\n  AppSidebarNav2.prototype.navList = function navList(items) {\n    var _this2 = this;\n\n    return items.map(function (item, index) {\n      return _this2.navType(item, index);\n    });\n  }; // nav type\n\n\n  AppSidebarNav2.prototype.navType = function navType(item, idx) {\n    return item.title ? this.navTitle(item, idx) : item.divider ? this.navDivider(item, idx) : item.label ? this.navLabel(item, idx) : item.children ? this.navDropdown(item, idx) : this.navItem(item, idx);\n  }; // nav list section title\n\n\n  AppSidebarNav2.prototype.navTitle = function navTitle(title, key) {\n    var classes = classNames('nav-title', title.class, title.className);\n    return React.createElement('li', {\n      key: key,\n      className: classes\n    }, this.navWrapper(title), ' ');\n  }; // simple wrapper for nav-title item\n\n\n  AppSidebarNav2.prototype.navWrapper = function navWrapper(item) {\n    return item.wrapper && item.wrapper.element ? React.createElement(item.wrapper.element, item.wrapper.attributes, item.name) : item.name;\n  }; // nav list divider\n\n\n  AppSidebarNav2.prototype.navDivider = function navDivider(divider, key) {\n    var classes = classNames('divider', divider.class, divider.className);\n    return React.createElement('li', {\n      key: key,\n      className: classes\n    });\n  }; // nav label with nav link\n\n\n  AppSidebarNav2.prototype.navLabel = function navLabel(item, key) {\n    var classes = {\n      item: classNames('hidden-cn', item.class),\n      link: classNames('nav-label', item.class ? item.class : ''),\n      icon: classNames('nav-icon', !item.icon ? 'fa fa-circle' : item.icon, item.label.variant ? 'text-' + item.label.variant : '', item.label.class ? item.label.class : '')\n    };\n    return this.navLink(item, key, classes);\n  }; // nav dropdown\n\n\n  AppSidebarNav2.prototype.navDropdown = function navDropdown(item, key) {\n    var classIcon = classNames('nav-icon', item.icon);\n    var attributes = this.getAttribs(item.attributes);\n    var classes = classNames('nav-link', 'nav-dropdown-toggle', item.class, attributes.class, attributes.className);\n    delete attributes.class;\n    delete attributes.className;\n    var itemAttr = this.getAttribs(item.itemAttr);\n    var liClasses = classNames(this.activeRoute(item.url, this.props), itemAttr.class, itemAttr.className);\n    delete itemAttr.class;\n    delete itemAttr.className;\n    return React.createElement('li', _extends({\n      key: key,\n      className: liClasses\n    }, itemAttr), React.createElement('a', _extends({\n      className: classes,\n      href: '#',\n      onClick: this.handleClick\n    }, attributes), React.createElement('i', {\n      className: classIcon\n    }), item.name, this.navBadge(item.badge)), React.createElement('ul', {\n      className: 'nav-dropdown-items'\n    }, this.navList(item.children)));\n  }; // nav item with nav link\n\n\n  AppSidebarNav2.prototype.navItem = function navItem(item, key) {\n    var classes = {\n      item: classNames(item.class),\n      link: classNames('nav-link', item.variant ? 'nav-link-' + item.variant : ''),\n      icon: classNames('nav-icon', item.icon)\n    };\n    return this.navLink(item, key, classes);\n  }; // nav link\n\n\n  AppSidebarNav2.prototype.navLink = function navLink(item, key, classes) {\n    var _this3 = this;\n\n    var ref = React.createRef();\n    var url = item.url || '';\n    var itemIcon = React.createElement('i', {\n      className: classes.icon\n    });\n    var itemBadge = this.navBadge(item.badge);\n    var attributes = this.getAttribs(item.attributes);\n    classes.link = classNames(classes.link, attributes.class, attributes.className);\n    delete attributes.class;\n    delete attributes.className;\n    var itemAttr = this.getAttribs(item.itemAttr);\n    classes.item = classNames(classes.item, itemAttr.class, itemAttr.className);\n    delete itemAttr.class;\n    delete itemAttr.className;\n    var NavLink = this.props.router.NavLink || RsNavLink;\n    return React.createElement(NavItem, _extends({\n      key: key,\n      className: classes.item\n    }, itemAttr), attributes.disabled ? React.createElement(RsNavLink, _extends({\n      href: '',\n      className: classes.link\n    }, attributes), itemIcon, item.name, itemBadge) : this.isExternal(url, this.props) || NavLink === RsNavLink ? React.createElement(RsNavLink, _extends({\n      href: url,\n      className: classes.link,\n      active: true\n    }, attributes), itemIcon, item.name, itemBadge) : React.createElement(NavLink, _extends({\n      to: url,\n      className: classes.link,\n      activeClassName: 'active',\n      onClick: function onClick() {\n        return _this3.hideMobile(ref);\n      },\n      ref: ref\n    }, attributes), itemIcon, item.name, itemBadge));\n  }; // badge addon to NavItem\n\n\n  AppSidebarNav2.prototype.navBadge = function navBadge(badge) {\n    if (badge) {\n      var classes = classNames(badge.class, badge.className);\n      return React.createElement(Badge, {\n        className: classes,\n        color: badge.variant\n      }, badge.text);\n    }\n\n    return null;\n  };\n\n  AppSidebarNav2.prototype.isExternal = function isExternal(url, props) {\n    var linkType = typeof url === 'undefined' ? 'undefined' : _typeof(url);\n    var link = linkType === 'string' ? url : linkType === 'object' && url.pathname ? url.pathname : linkType === 'function' && typeof url(props.location) === 'string' ? url(props.location) : linkType === 'function' && _typeof(url(props.location)) === 'object' ? url(props.location).pathname : '';\n    return link.substring(0, 4) === 'http';\n  };\n\n  AppSidebarNav2.prototype.observeDomMutations = function observeDomMutations() {\n    var _this4 = this;\n\n    if (window.MutationObserver) {\n      // eslint-disable-next-line\n      this.changes = new MutationObserver(function (mutations) {\n        var isSidebarMinimized = document.body.classList.contains('sidebar-minimized') || false;\n\n        _this4.setState({\n          sidebarMinimized: isSidebarMinimized\n        });\n\n        LayoutHelper.sidebarPSToggle(!isSidebarMinimized);\n      });\n      var element = document.body;\n      this.changes.observe(element, {\n        attributes: true,\n        attributeFilter: ['class']\n      });\n    }\n\n    window.addEventListener('resize', this.onResize);\n  };\n\n  AppSidebarNav2.prototype.onResize = function onResize() {\n    LayoutHelper.sidebarPSToggle(true);\n  };\n\n  AppSidebarNav2.prototype.componentDidMount = function componentDidMount() {\n    this.observeDomMutations();\n  };\n\n  AppSidebarNav2.prototype.componentWillUnmount = function componentWillUnmount() {\n    try {\n      this.changes.disconnect();\n      window.removeEventListener('resize', this.onResize);\n    } catch (ignore) {\n      // eslint-disable-next-line\n      console.warn('CoreUI SidebarNav failed to disconnect from MutationObserver', ignore);\n    }\n  };\n\n  AppSidebarNav2.prototype.render = function render() {\n    var _this5 = this;\n\n    var _props = this.props,\n        className = _props.className,\n        children = _props.children,\n        navConfig = _props.navConfig,\n        attributes = _objectWithoutProperties(_props, ['className', 'children', 'navConfig']);\n\n    delete attributes.isOpen;\n    delete attributes.staticContext;\n    delete attributes.Tag;\n    delete attributes.router;\n    var navClasses = classNames(className, 'sidebar-nav');\n    var options = Object.assign({}, {\n      suppressScrollX: true,\n      suppressScrollY: this.state.sidebarMinimized\n    }); // sidebar-nav root\n\n    return React.createElement(PerfectScrollbar, _extends({\n      className: navClasses\n    }, attributes, {\n      options: options,\n      ref: function ref(_ref) {\n        _this5._scrollBarRef = _ref;\n      }\n    }), React.createElement(Nav, null, children || this.navList(navConfig.items)));\n  };\n\n  return AppSidebarNav2;\n}(Component);\n\nAppSidebarNav2.propTypes = process.env.NODE_ENV !== \"production\" ? propTypes : {};\nAppSidebarNav2.defaultProps = defaultProps;\nexport default AppSidebarNav2;","map":null,"metadata":{},"sourceType":"module"}